# Task 7: Determine the highest and lowest salaries and identify the employees with these salaries
highest_salary <- max(employee_data$Salary)
lowest_salary <- min(employee_data$Salary)
employees_with_highest_salary <- subset(employee_data, Salary == highest_salary)
employees_with_lowest_salary <- subset(employee_data, Salary == lowest_salary)
cat("Task 7: Determined highest and lowest salaries\n")
cat("Highest Salary: $", highest_salary, "\n")
cat("Employees with Highest Salary:\n")
print(employees_with_highest_salary)
cat("Lowest Salary: $", lowest_salary, "\n")
cat("Employees with Lowest Salary:\n")
print(employees_with_lowest_salary)
cat("\n")
# Task 8: Create a bar plot to visualize the number of employees in each department
barplot(table(employee_data$Department), col = "green", main = "Number of Employees in Each Department")
cat("Task 8: Created a bar plot\n\n")
# Task 9: Generate a scatter plot to explore the relationship between years of service and salary
plot(employee_data$YearsOfService, employee_data$Salary, xlab = "Years of Service", ylab = "Salary", main = "Scatter Plot of Years of Service vs. Salary", col = "purple")
cat("Task 9: Generated a scatter plot\n\n")
# Task 10: Save the "Experienced Employees" data frame as a CSV file named "experienced_employees.csv"
write.csv(experienced_employees, "experienced_employees.csv", row.names = FALSE)
cat("Task 10: Saved 'Experienced Employees' data frame to 'experienced_employees.csv'\n\n")
# Task 1: Create a sample data frame with new values
employee_data <- data.frame(
EmployeeID = 21:30,
Name = c("Olivia", "Parker", "Quinn", "Rachel", "Samuel", "Taylor", "Ursula", "Victor", "Wendy", "Xavier"),
Department = c("IT", "Marketing", "R&D", "Finance", "HR", "IT", "Finance", "Marketing", "R&D", "HR"),
Salary = c(65000, 78000, 30500, 37200, 63900, 52200, 23300, 72100, 92900, 13400),
JoiningDate = c("2019-07-10", "2020-02-14", "2021-06-22", "2018-09-15", "2020-12-10", "2017-03-18", "2022-01-12", "2018-11-05", "2020-04-28", "2019-10-14")
)
# Save the data frame to a CSV file
write.csv(employee_data, "employee_data_updated.csv", row.names = FALSE)
cat("Task 1: Sample data frame created and saved to 'employee_data_updated.csv'\n\n")
# Task 2: Load the updated dataset from "employee_data_updated.csv" into a data frame in R
employee_data <- read.csv("employee_data_updated.csv")
cat("Task 2: Data loaded from 'employee_data_updated.csv'\n\n")
# Task 3: Display the structure of the updated data frame
str(employee_data)
cat("Task 3: Displayed the structure of the data frame\n\n")
# Task 4: Calculate and add a new column named "Years of Service"
employee_data$JoiningDate <- as.Date(employee_data$JoiningDate)
employee_data$YearsOfService <- as.numeric(difftime(Sys.Date(), employee_data$JoiningDate, units = "days")) / 365.25
cat("Task 4: Calculated and added 'Years of Service' column\n\n")
# Task 5: Create a new data frame named "Experienced Employees"
experienced_employees <- subset(employee_data, YearsOfService >= 3)
cat("Task 5: Created 'Experienced Employees' data frame\n\n")
# Task 6: Calculate and print the average salary of employees in each department
avg_salary_by_dept <- aggregate(Salary ~ Department, data = employee_data, FUN = mean)
print(avg_salary_by_dept)
cat("Task 6: Calculated and printed average salary by department\n\n")
# Task 7: Determine the highest and lowest salaries and identify the employees with these salaries
highest_salary <- max(employee_data$Salary)
lowest_salary <- min(employee_data$Salary)
employees_with_highest_salary <- subset(employee_data, Salary == highest_salary)
employees_with_lowest_salary <- subset(employee_data, Salary == lowest_salary)
cat("Task 7: Determined highest and lowest salaries\n")
cat("Highest Salary: $", highest_salary, "\n")
cat("Employees with Highest Salary:\n")
print(employees_with_highest_salary)
cat("Lowest Salary: $", lowest_salary, "\n")
cat("Employees with Lowest Salary:\n")
print(employees_with_lowest_salary)
cat("\n")
# Task 8: Create a bar plot to visualize the number of employees in each department
barplot(table(employee_data$Department), col = "orange", main = "Number of Employees in Each Department")
cat("Task 8: Created a bar plot\n\n")
# Task 9: Generate a scatter plot to explore the relationship between years of service and salary
plot(employee_data$YearsOfService, employee_data$Salary, xlab = "Years of Service", ylab = "Salary", main = "Scatter Plot of Years of Service vs. Salary", col = "brown")
cat("Task 9: Generated a scatter plot\n\n")
# Task 10: Save the "Experienced Employees" data frame as a CSV file named "experienced_employees.csv"
write.csv(experienced_employees, "experienced_employees_updated.csv", row.names = FALSE)
cat("Task 10: Saved 'Experienced Employees' data frame to 'experienced_employees_updated.csv'\n\n")
# Task 1: Create a sample data frame with new values
employee_data <- data.frame(
EmployeeID = 11:20,
Name = c("Alice", "Bob", "Charlie", "David", "Eva", "Frank", "Grace", "Henry", "Ivy", "Jack"),
Department = c("Finance", "HR", "IT", "Marketing", "R&D", "Finance", "IT", "Marketing", "R&D", "HR"),
Salary = c(60000, 72000, 28500, 35200, 61900, 50200, 22300, 70100, 90900, 12400),
JoiningDate = c("2018-06-20", "2017-09-14", "2022-02-10", "2019-05-05", "2021-08-15", "2018-11-18", "2020-04-22", "2016-07-15", "2018-12-28", "2017-08-04")
)
# Save the data frame to a CSV file
write.csv(employee_data, "employee_data_modified.csv", row.names = FALSE)
cat("Task 1: Sample data frame created and saved to 'employee_data_modified.csv'\n\n")
# Task 2: Load the modified dataset from "employee_data_modified.csv" into a data frame in R
employee_data <- read.csv("employee_data_modified.csv")
cat("Task 2: Data loaded from 'employee_data_modified.csv'\n\n")
# Task 3: Display the structure of the modified data frame
str(employee_data)
cat("Task 3: Displayed the structure of the data frame\n\n")
# Task 4: Calculate and add a new column named "Years of Service"
employee_data$JoiningDate <- as.Date(employee_data$JoiningDate)
employee_data$YearsOfService <- as.numeric(difftime(Sys.Date(), employee_data$JoiningDate, units = "days")) / 365.25
cat("Task 4: Calculated and added 'Years of Service' column\n\n")
# Task 5: Create a new data frame named "Experienced Employees"
experienced_employees <- subset(employee_data, YearsOfService >= 4)
cat("Task 5: Created 'Experienced Employees' data frame\n\n")
# Task 6: Calculate and print the average salary of employees in each department
avg_salary_by_dept <- aggregate(Salary ~ Department, data = employee_data, FUN = mean)
print(avg_salary_by_dept)
cat("Task 6: Calculated and printed average salary by department\n\n")
# Task 7: Determine the highest and lowest salaries and identify the employees with these salaries
highest_salary <- max(employee_data$Salary)
lowest_salary <- min(employee_data$Salary)
employees_with_highest_salary <- subset(employee_data, Salary == highest_salary)
employees_with_lowest_salary <- subset(employee_data, Salary == lowest_salary)
cat("Task 7: Determined highest and lowest salaries\n")
cat("Highest Salary: $", highest_salary, "\n")
cat("Employees with Highest Salary:\n")
print(employees_with_highest_salary)
cat("Lowest Salary: $", lowest_salary, "\n")
cat("Employees with Lowest Salary:\n")
print(employees_with_lowest_salary)
cat("\n")
# Task 8: Create a bar plot to visualize the number of employees in each department
barplot(table(employee_data$Department), col = "green", main = "Number of Employees in Each Department")
cat("Task 8: Created a bar plot\n\n")
# Task 9: Generate a scatter plot to explore the relationship between years of service and salary
plot(employee_data$YearsOfService, employee_data$Salary, xlab = "Years of Service", ylab = "Salary", main = "Scatter Plot of Years of Service vs. Salary", col = "purple")
cat("Task 9: Generated a scatter plot\n\n")
# Task 10: Save the "Experienced Employees" data frame as a CSV file named "experienced_employees.csv"
write.csv(experienced_employees, "experienced_employees.csv", row.names = FALSE)
cat("Task 10: Saved 'Experienced Employees' data frame to 'experienced_employees.csv'\n\n")
student_scores=data.frame(
studentid=1:100,
gender = sample(c("male","female"),100,replace=T),
Age = sample(18:25,100,replace = T),
Examscore = round(runif(100,min=50,max=100),1)
)
write.csv(student_scores,"student_scores.csv",row.names=F)
student_scores=data.frame(
studentid=1:100,
gender = sample(c("male","female"),100,replace=T),
Age = sample(18:25,100,replace = T),
Examscore = round(runif(100,min=50,max=100),1)
)
write.csv(student_scores,"student_scores.csv",row.names=F)
print(getwd())
print(getwd())
setwd("D:\\sem and carrier\\2nd sem\\r prog\\codes")
print(getwd())
setwd("D:\\sem and carrier\\2nd sem\\r prog\\codes")
v=c('h',FALSE,3)
print(v)
typeof(v)
class(v)
v1=seq(1:10)
print(v1)
v=NULL
x=c("Jan","Feb","Mar","Apr","May","June","July","aug","sep","oct","nov","dec")
y=x[c(3,2,7)]
print(y)
y=x[c(T,F,T,F,F,T,T)]
print(y)
z=x[c(-3,-7)]
c=x[c(0,0,0,1,0,0,1)]
print(z)
print(c)
#vector arithmetics
v1=c(1:10)
v2=c(11:10)
add.v=v1+v2
sub.v=v1-v2
multi.v=v1*v2
divi.v=v1/v2
#sort
v=c(4,78,-45,6,89,678)
sort.v=sort(v)
print(sort.v)
#sorting the elements in the reverse order
revsort.v=sort(v,decreasing=T)
#sorting chracter vec
sort(x)
sort.v=sort(x)
#sorting chracter in the reverse order
revsort.v=sort(x,decreasing = T)
#order
order.v=order(v)
print(order.v)
#practice
#1.
sales_data=c(45,60,35,75,80,62,48,53,69,72,40,55)
#2
sum1=sum(sales_data)
print(sum1)
#3
avg=sum1/12
print(avg)
sortdata=sort(sales_data)
print(sortdata)
#4
highest_sales=sortdata[c(12)]
print(highest_sales)
#4
lowest_sales = sortdata[c(1)]
print(lowest_sales)
#5
incre=(sales_data[c(3)]*(10/100))+sales_data[c(3)]
print(incre)
#6
sorted_sales=sort(sales_data)
print(sorted_sales)
#7
rev_sorted_sales=sort(sales_data,decreasing = T)
print(rev_sorted_sales)
#8
print(median(sales_data))
#Matrices
#creating the matrix using the matrix function
x=c(1:9)
y=matrix(x,3,3,T,list(c("r1","r2","r3"),c("c1","c2","c2")))
print(y)
x=c(1:9)
y=matrix(x,3,3,dimnames=list(c("r1","r2","r3"),c("c1","c2","c2")))
print(y)
dim(y)
print(colnames(y))
print(rownames(y))
colnames(y)=c("cn1","cn2","cn3")
rownames(y)=c("rw1","rw2","rw3")
print(y)
#creating the matrix using the cbind and rbind functions
print(cbind(c(1:9),c(1:9),c(1:9)))
print(rbind(c(10,10,10)))
#creating the matrix using the dim function
x=c(1:9)
print(class(x))
dim(x)=c(3,3)
print(x)
print(class(x))
#matrix indexing
print(x[c(1,2,3),c(2,3)])
print(x[c(3,1)])
print(x[,])
print(x[])
print(y[c(-2)])
print(class(x[1,]))
print(class(x[1,,drop=F]))
#using logical vector as index
x=matrix(c(1:9),3,3,T)
print(x[c(T,F,T),c(T,T,F)])
print(x[c(T,F),c(2,3)])
print(x[x>5])
print(x[x%%2 ==0])
print(y[T,c("cn1","cn3")])
x[2,2]=10
print(x)
print(t(x))
print(rbind(x,c(10,11,12)))
print(cbind(x,c(10,11,12)))
z=x[1:2,];x
print(z)
dim(z)=c(3,2)
print(z)
#practice the problems
#1.create two matrix
a=matrix(c(1:9),3,3)
b=matrix(c(11:19),3,3)
#sum
c=a+b
print(c)
#diff
c=a-b
print(c)
#* with 2
c=a*2
print(c)
#calculate the product of 2 matrix
c=a %*%b
print(c)
#transpose
print(t(c))
#determinant
print(det(c))
a1 <- c(3, 2, 5)
a2 <- c(2, 3, 2)
a3 <- c(5, 2, 4)
# bind the three vectors into a matrix
# using rbind() which is basically
# row-wise binding.
A <- rbind(a1, a2, a3)
# to calculate the inverse.
T1 <- solve(A)
# print the inverse of the matrix.
print(T1)
#inverse
#d=solve(b)
#print(d)
if (all(t(A)==solve(A))){
print("its orthogonal")
}
for (i in c(1:3)){
for (j in c(1:3)){
c[i,j]=a[i,j]**2
}
}
print(c)
# Assuming matrix_B is defined
mean_B <- mean(b)
print(mean_B)
# Assuming matrix_A is defined
column_sums <- colSums(a)
print(column_sums)
# Assuming matrix_B is defined
row_means_B <- rowMeans(b)
print(row_means_B)
# Assuming matrix_A is defined
second_row_A <- a[2, ]
print(second_row_A)
# Assuming matrix_B is defined
third_column_B <- b[, 3]
print(third_column_B)
#factors
x = c("dec","apr","jan","mar")
month_levels = c("jan","feb","mar","apr","may","jun","jul","aug","sep","oct","nov","dec")
y=factor(x,levels=month_levels)
print(y)
?factor
print(sort(y))
x2=c("dec","apr","january","mar")
y2=factor(x2,levels = month_levels,ordered = is.ordered(x2))
print(y2)
is.factor(y2)
#SCALAR - CHARACTER
#VECTOR - NUMERICAL
#MATRIX - LOGICAL
#DATA FRAME - MULTIPLE DATA TYPES
#LIST - MULTIPLE DATA TYPES AND MUTIPLE STRUCTURE
#LIST
list_info = list("blue","yellow",c(12,13,14),T,13.12,103.4)
print(list_info)
list_name = list(matrix(c(1,2,3,4,5,6),nrow= 1),c("mon","tue","wed"))
print(list_name)
names(list_name)= c("matrix","half_week")
print(list_name)
#indexing lists
print(list_info[1])
list3=list(c("mon","tue","wed"),matrix(c(2,1,1,1,5,6),nrow=2),list(c(1,2,3)))
list3[4]=T
print(list3)
#TO DELETE OR WITHDRAW ELEMENT
list3[4]=NULL
print(list3)
#diff between ordinal and nominal
a=c(1,2,3,4,5)
b=as.factor(a)
c=as.ordered(a)
print(b)
print(c)
sizes=factor(c("small","large","large","small","medium"))
sizes
sizes = factor(sizes,levels = rev(levels(sizes)))
sizes
#data frame
df = data.frame(col1=1:3,
col2=c("hello","hi","hi"),
col3=c(T,F,F),stringAsFactor=F)
#access the structure of the data frame
str(df)
df
#concentrate on stringsasfactor
v1=1:3
v2=c("this","is","text")
v3=c(T,F,T)
df=data.frame(col1=v1,col2=v2,col3=v3)
print(df)
as.matrix(df)
l= list(item1=1,item2=c("this","is","text"),item3 = c(2.5,4.2,5.1))
l
as.data.frame(l)
m1=matrix(1:12,4,3)
as.data.frame(m1)
v4=c("a","b","c")
cbind(df,v4)
str(v4)
dim(df)
attributes(df)
rownames(df)=c("row1","row2","row3")
df
attributes(df)
colnames(df)=c("col1","col2","col3")
df
attributes(df)
names(df)=c("col.1","col.2","col.3")
df
attributes(df)
comment(df)="adding a comment to a data frame"
#subsetting
df
#subsetting by row numbers
df[2:3, ]
#subsetting by row names
rownames(df)=c("row1","row2","row3")
df[c("row2","row3"),]
#subsetting columns like a list
df[c("col.2","col.3")]
df[,c("col.2","col.3")]
df[1:2,c(1,3)]
v=c(1,2,3)
df[,v]
df[,2]
#df[,2.drop=F]
#practice
data()
head(mtcars)
summary(mtcars)
max(mtcars$mpg)
mtcars[mtcars$am]
subset(mtcars,am ==0)
nrow(subset(mtcars,am ==0))
rownames(subset(mtcars,vs==0))
subset(mtcars,cyl==6)
a=subset(mtcars,cyl==4)
max(a$mpg)
b=subset(mtcars,am==0)
c=subset(b,cyl==4)
c
nrow(c)
a=subset(mtcars,am==0)
b=subset(a,cyl==8)
mean(b$wt)
#CREATING A SAMPLE DATASET
student_scores=data.frame(
studentid=1:100,
gender = sample(c("male","female"),100,replace=T),
Age = sample(18:25,100,replace = T),
Examscore = round(runif(100,min=50,max=100),1)
)
write.csv(student_scores,"student_scores.csv",row.names=F)
print(getwd())
setwd("D:\\sem and carrier\\2nd sem\\r prog\\codes")
read.csv(student_scores)
read.csv("student_scores.csv")
print(age)
age = max(data$Age)
data= read.csv("student_socres.csv")
data=read.csv("student_scores.csv")
print(data)
print(is.data.frame(data))
print(ncol(data))
print(nrow(data))
str(data)
# create a data frame
age = max(data$Age)
print(age)
gtage=subset(data,Age >= 20)
print(gtage)
mean(b$wt)
#CREATING A SAMPLE DATASET
student_scores=data.frame(
studentid=1:100,
gender = sample(c("male","female"),100,replace=T),
Age = sample(18:25,100,replace = T),
Examscore = round(runif(100,min=50,max=100),1)
)
write.csv(student_scores,"student_scores.csv",row.names=F)
print(getwd())
setwd("D:\\sem and carrier\\2nd sem\\r prog\\codes")
data=read.csv("student_scores.csv")
print(data)
print(is.data.frame(data))
print(ncol(data))
print(nrow(data))
str(data)
# create a data frame
age = max(data$Age)
print(age)
gtage=subset(data,Age >= 20)
print(gtage)
fem=subset(data,gender == "female")
marks=subset(fem,Examscore>=80)
print(marks)
age = max(data$Age)
print(age)
gtage=subset(data,Age >= 20)
print(gtage)
fem=subset(data,gender == "female")
marks=subset(fem,Examscore>=80)
print(marks)
wirte.csv(marks,"output.csv")
write.csv(marks,"output.csv")
newdata=read.csv("output.csv")
print(newdata)
View(data)
head(data,3)
tail(data,10)
data2=table("hello.txt")
data2=table("hello.txt")
print(data2)
data2=read.table("hello.txt")
print(data2)
data2=read.delim("hello.txt")
print(data2)
data2=read.table("hello.txt")
print(data2)
data2=read.table("hello.txt",header=F,sep = "",dec=".")
print(data2)
str(data)
data2=readLines("hello.txt")
print(data2)
data2=read.cs("hello.txt")
data2=read.csv("hello.txt")
print(data2)
data2=readLines("hello.txt")
print(data2)
str(data)
data2=readLines("hello.txt")
print(data2)
str(data)
tail(data,10)
data2=readLines("hello.txt")
print(data2)
str(data)
